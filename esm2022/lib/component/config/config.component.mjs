import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ButtonModule } from 'primeng/button';
import { DialogModule } from 'primeng/dialog';
import { DragDropModule, moveItemInArray } from '@angular/cdk/drag-drop';
import { CheckboxModule } from 'primeng/checkbox';
import { FormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { InputTextModule } from 'primeng/inputtext';
import { CommonModule } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "primeng/button";
import * as i3 from "@angular/forms";
import * as i4 from "primeng/dialog";
import * as i5 from "primeng/inputtext";
import * as i6 from "primeng/checkbox";
import * as i7 from "@angular/common";
import * as i8 from "@angular/cdk/drag-drop";
export class ConfigDisplayComponent {
    constructor(translate) {
        this.translate = translate;
        this.visible = false;
        this.colsConfig = [];
        this.selectAll = false;
        this.filterText = '';
        this.onChangeConfig = new EventEmitter();
    }
    ngOnInit() {
        this.colsConfig = this.cols.map((col) => {
            return {
                ...col,
                checked: !col.hidden,
            };
        });
    }
    get filteredColsConfig() {
        return this.colsConfig.filter((col) => col.header.toLowerCase().includes(this.filterText.toLowerCase()));
    }
    showDialog() {
        this.visible = true;
    }
    changeAll() {
        this.colsConfig.forEach((col) => {
            if (!col.fixed) {
                col.checked = this.selectAll;
            }
        });
        this.checkChangeAll();
    }
    checkChangeAll() {
        setTimeout(() => {
            const s1 = this.colsConfig.filter(col => col.checked).length;
            if (s1 === this.colsConfig.length) {
                this.selectAll = true;
            }
            else {
                this.selectAll = false;
            }
        }, 100);
    }
    drop(event) {
        this.checkChangeAll();
        if (this.colsConfig[event.currentIndex].fixed) {
            return;
        }
        moveItemInArray(this.colsConfig, event.previousIndex, event.currentIndex);
    }
    cancel() {
        this.visible = false;
    }
    apply() {
        this.visible = false;
        this.cols = this.colsConfig.map((col) => {
            return {
                ...col,
                hidden: !col.checked,
            };
        });
        this.onChangeConfig.emit(this.cols);
    }
    formatFilter() {
        const s1 = this.colsConfig.filter(col => col.checked).length;
        return s1.toString().padStart(2, '0') + '/' + this.colsConfig.length.toString().padStart(2, '0') + ' ' + this.translate.instant('selected');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ConfigDisplayComponent, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ConfigDisplayComponent, isStandalone: true, selector: "app-config-display", inputs: { cols: "cols", header: "header" }, outputs: { onChangeConfig: "onChangeConfig" }, ngImport: i0, template: "<button pButton (click)=\"showDialog()\" type=\"button\" class=\"p-button-rounded p-button-secondary  \"\n  style=\"margin-right: 8px;\">\n  <!-- <view-svg name=\"rowHorizontal\"></view-svg> -->\n</button>\n<p-dialog [header]=\"(header || 'Config') | translate\" appendTo=\"body\" [modal]=\"true\" [draggable]=\"false\"\n  [resizable]=\"false\" [(visible)]=\"visible\" [style]=\"{ width: '35rem', height: 'auto' }\">\n  <div class=\"filter-input-container\">\n    <div class=\"input-with-icon\">\n      <i class=\"pi pi-search\"></i>\n      <input type=\"text\" pInputText [(ngModel)]=\"filterText\" [placeholder]=\"'fillterConfig' | translate\" />\n    </div>\n  </div>\n  <div class=\"config-box\">\n    <span>\n      <p-checkbox [(ngModel)]=\"selectAll\" (ngModelChange)=\"changeAll()\" [binary]=\"true\" />\n      {{'selectAll' | translate}}\n    </span>\n    <span> {{formatFilter()}}</span>\n  </div>\n  <div cdkDropList class=\"config-list\" (cdkDropListDropped)=\"drop($event)\">\n\n    <ng-container *ngFor=\"let col of filteredColsConfig\">\n      <div class=\"config-box\" [cdkDragDisabled]=\"col.fixed\" cdkDrag>\n        <span>\n          <p-checkbox (ngModelChange)=\"checkChangeAll()\" [(ngModel)]=\"col.checked\" [disabled]=\"col.fixed\"\n            [binary]=\"true\" />\n          {{col.header | translate}}\n        </span>\n        <view-svg name=\"move\"></view-svg>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"config-actions\">\n    <button pButton type=\"button\" [label]=\"'cancel'| translate\" class=\"p-button-secondary\" (click)=\"cancel()\"></button>\n    <button pButton type=\"button\" [label]=\"'apply'| translate\" class=\"p-button-primary\" (click)=\"apply()\"></button>\n  </div>\n</p-dialog>", styles: [".config-list{width:500px;max-width:100%;min-height:60px;max-height:550px;display:block;background:#fff;overflow:hidden;overflow-y:auto}.config-box{padding:10px 16px;border:solid 1px #DCDCDC;border-radius:4px;margin:4px 0;color:#000000de;display:flex;flex-direction:row;align-items:center;justify-content:space-between;box-sizing:border-box;cursor:move;background:#fff;font-size:14px}.config-box span{display:flex;flex-direction:row;align-items:center;gap:10px}.cdk-drag-preview{border:none;display:none;box-sizing:border-box;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-placeholder{opacity:1}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.config-list.cdk-drop-list-dragging .config-box:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}.config-actions{display:flex;justify-content:flex-end;gap:1rem;padding-top:16px;align-items:center}.config-actions button{min-width:80px}::ng-deep .p-dialog:has(.config-list){top:50px;position:absolute}.filter-input-container{padding-top:8px;padding-bottom:16px}.filter-input-container .input-with-icon{position:relative;display:flex;align-items:center}.filter-input-container .input-with-icon i{position:absolute;left:20px;font-size:16px;color:#6c6c6c}.filter-input-container .input-with-icon input{width:100%;padding-left:3.4rem;font-size:14px}\n"], dependencies: [{ kind: "ngmodule", type: ButtonModule }, { kind: "directive", type: i2.ButtonDirective, selector: "[pButton]", inputs: ["iconPos", "loadingIcon", "label", "icon", "loading"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: DialogModule }, { kind: "component", type: i4.Dialog, selector: "p-dialog", inputs: ["header", "draggable", "resizable", "positionLeft", "positionTop", "contentStyle", "contentStyleClass", "modal", "closeOnEscape", "dismissableMask", "rtl", "closable", "responsive", "appendTo", "breakpoints", "styleClass", "maskStyleClass", "showHeader", "breakpoint", "blockScroll", "autoZIndex", "baseZIndex", "minX", "minY", "focusOnShow", "maximizable", "keepInViewport", "focusTrap", "transitionOptions", "closeIcon", "closeAriaLabel", "closeTabindex", "minimizeIcon", "maximizeIcon", "visible", "style", "position"], outputs: ["onShow", "onHide", "visibleChange", "onResizeInit", "onResizeEnd", "onDragEnd", "onMaximize"] }, { kind: "ngmodule", type: InputTextModule }, { kind: "directive", type: i5.InputText, selector: "[pInputText]" }, { kind: "ngmodule", type: CheckboxModule }, { kind: "component", type: i6.Checkbox, selector: "p-checkbox", inputs: ["value", "name", "disabled", "binary", "label", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "styleClass", "labelStyleClass", "formControl", "checkboxIcon", "readonly", "required", "trueValue", "falseValue"], outputs: ["onChange"] }, { kind: "ngmodule", type: TranslateModule }, { kind: "pipe", type: i1.TranslatePipe, name: "translate" }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "ngmodule", type: DragDropModule }, { kind: "directive", type: i8.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { kind: "directive", type: i8.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ConfigDisplayComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-config-display', standalone: true, imports: [ButtonModule, FormsModule, DialogModule, InputTextModule, CheckboxModule,
                        TranslateModule,
                        CommonModule, DragDropModule], template: "<button pButton (click)=\"showDialog()\" type=\"button\" class=\"p-button-rounded p-button-secondary  \"\n  style=\"margin-right: 8px;\">\n  <!-- <view-svg name=\"rowHorizontal\"></view-svg> -->\n</button>\n<p-dialog [header]=\"(header || 'Config') | translate\" appendTo=\"body\" [modal]=\"true\" [draggable]=\"false\"\n  [resizable]=\"false\" [(visible)]=\"visible\" [style]=\"{ width: '35rem', height: 'auto' }\">\n  <div class=\"filter-input-container\">\n    <div class=\"input-with-icon\">\n      <i class=\"pi pi-search\"></i>\n      <input type=\"text\" pInputText [(ngModel)]=\"filterText\" [placeholder]=\"'fillterConfig' | translate\" />\n    </div>\n  </div>\n  <div class=\"config-box\">\n    <span>\n      <p-checkbox [(ngModel)]=\"selectAll\" (ngModelChange)=\"changeAll()\" [binary]=\"true\" />\n      {{'selectAll' | translate}}\n    </span>\n    <span> {{formatFilter()}}</span>\n  </div>\n  <div cdkDropList class=\"config-list\" (cdkDropListDropped)=\"drop($event)\">\n\n    <ng-container *ngFor=\"let col of filteredColsConfig\">\n      <div class=\"config-box\" [cdkDragDisabled]=\"col.fixed\" cdkDrag>\n        <span>\n          <p-checkbox (ngModelChange)=\"checkChangeAll()\" [(ngModel)]=\"col.checked\" [disabled]=\"col.fixed\"\n            [binary]=\"true\" />\n          {{col.header | translate}}\n        </span>\n        <view-svg name=\"move\"></view-svg>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"config-actions\">\n    <button pButton type=\"button\" [label]=\"'cancel'| translate\" class=\"p-button-secondary\" (click)=\"cancel()\"></button>\n    <button pButton type=\"button\" [label]=\"'apply'| translate\" class=\"p-button-primary\" (click)=\"apply()\"></button>\n  </div>\n</p-dialog>", styles: [".config-list{width:500px;max-width:100%;min-height:60px;max-height:550px;display:block;background:#fff;overflow:hidden;overflow-y:auto}.config-box{padding:10px 16px;border:solid 1px #DCDCDC;border-radius:4px;margin:4px 0;color:#000000de;display:flex;flex-direction:row;align-items:center;justify-content:space-between;box-sizing:border-box;cursor:move;background:#fff;font-size:14px}.config-box span{display:flex;flex-direction:row;align-items:center;gap:10px}.cdk-drag-preview{border:none;display:none;box-sizing:border-box;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-placeholder{opacity:1}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.config-list.cdk-drop-list-dragging .config-box:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}.config-actions{display:flex;justify-content:flex-end;gap:1rem;padding-top:16px;align-items:center}.config-actions button{min-width:80px}::ng-deep .p-dialog:has(.config-list){top:50px;position:absolute}.filter-input-container{padding-top:8px;padding-bottom:16px}.filter-input-container .input-with-icon{position:relative;display:flex;align-items:center}.filter-input-container .input-with-icon i{position:absolute;left:20px;font-size:16px;color:#6c6c6c}.filter-input-container .input-with-icon input{width:100%;padding-left:3.4rem;font-size:14px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; }, propDecorators: { cols: [{
                type: Input
            }], header: [{
                type: Input
            }], onChangeConfig: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,