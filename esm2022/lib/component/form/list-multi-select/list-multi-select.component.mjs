import { Component, forwardRef, Input, } from '@angular/core';
import { FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';
import { OverlayPanelModule } from 'primeng/overlaypanel';
import { ButtonModule } from 'primeng/button';
import { TranslateModule } from '@ngx-translate/core';
import { MultiSelectModule } from 'primeng/multiselect';
import { CommonModule } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "primeng/overlaypanel";
import * as i5 from "primeng/api";
import * as i6 from "primeng/button";
import * as i7 from "primeng/multiselect";
export class ListMultiSelectComponent {
    get f() {
        return this.formGroup?.controls;
    }
    constructor(translate) {
        this.translate = translate;
        this.filters = [];
        this.tempFormValues = {};
    }
    ngOnInit() {
    }
    openFilterPanel() {
        this.tempFormValues = { ...this.formGroup.value };
    }
    applyFilters() {
        this.filters.forEach(filter => {
            this.formGroup?.get(filter.formControlName)?.setValue(this.tempFormValues[filter.formControlName]);
        });
    }
    getTooltipText(filter) {
        const control = this.tempFormValues[`${filter.formControlName}`];
        if (control) {
            const selectedOptions = filter.options.filter(option => control.includes(option.value));
            return selectedOptions.length > 0
                ? selectedOptions.map(option => this.translate.instant(option.label)).join(', ')
                : '';
        }
        return '';
    }
    getNumFiltersWithValues() {
        return this.filters.reduce((count, filter) => {
            const value = this.f[filter.formControlName]?.value;
            return value && value.length ? count + 1 : count;
        }, 0);
    }
    clearFilter() {
        this.filters.forEach(filter => {
            this.formGroup?.get(filter.formControlName)?.setValue(null);
        });
    }
    formatFilter(s1, s2) {
        if (!s1)
            return '';
        return s1.toString().padStart(2, '0') + '/' + s2.toString().padStart(2, '0') + ' ' + this.translate.instant('selected');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ListMultiSelectComponent, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ListMultiSelectComponent, isStandalone: true, selector: "list-multi-select", inputs: { formGroup: "formGroup", filters: "filters" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ListMultiSelectComponent),
                multi: true,
            }
        ], ngImport: i0, template: "<div class=\"flex\">\n  <div class=\"list-multi-select \">\n    <div>\n      <button type=\"button\" pButton (click)=\"filterPanel.toggle($event)\" class=\"p-button-text button-custom-filter\">\n        <!-- <view-svg name=\"controlsAt\"></view-svg> -->\n\n        <span class=\"p-button-label\" [class.open]=\"filterPanel.overlayVisible\"\n          *ngIf=\"!getNumFiltersWithValues()\">{{'moreFilter' | translate}}</span>\n        <span class=\"p-button-label open\" *ngIf=\"getNumFiltersWithValues()\">{{'filtered' |\n          translate}} ({{getNumFiltersWithValues()}}/{{filters.length}})</span>\n      </button>\n      <p-overlayPanel #filterPanel (onShow)=\"openFilterPanel()\" [showCloseIcon]=\"false\" [style]=\"{width: '450px'}\">\n\n        <div class=\"filter-panel\">\n          <div class=\"filter-item\" *ngFor=\"let filter of filters\">\n            <div class=\"flex align-items-center justify-content-between\">\n              <label>{{ filter.label | translate }}</label>\n              <label *ngIf=\"tempFormValues[filter.formControlName] && filter.options\">\n                {{formatFilter(tempFormValues[filter.formControlName].length,filter.options.length)}}\n              </label>\n            </div>\n            <p-multiSelect [pTooltip]=\"getTooltipText(filter)\" appendTo=\"body\" tooltipPosition=\"bottom\"\n              [options]=\"filter.options\" ngDefaultControl [(ngModel)]=\"tempFormValues[filter.formControlName]\"\n              placeholder=\"{{ 'all' | translate }}\">\n\n              <ng-template let-selectedItems pTemplate=\"selectedItems\">\n                <span *ngIf=\"selectedItems?.length > 0\">\n                  {{ getTooltipText(filter)}}\n                </span>\n                <span *ngIf=\"!selectedItems || selectedItems.length === 0\">\n                  {{ 'all' | translate }}\n                </span>\n              </ng-template>\n              <ng-template pTemplate=\"option\" let-option>{{option.label | translate}} </ng-template>\n            </p-multiSelect>\n          </div>\n          <div class=\"filter-actions\">\n            <button pButton type=\"button\" [label]=\"'cancel'| translate\" class=\"p-button-outlined\"\n              (click)=\"filterPanel.hide()\"></button>\n            <button pButton type=\"button\" [label]=\"'apply'| translate\" class=\"p-button-primary\"\n              (click)=\"applyFilters(); filterPanel.hide()\"></button>\n          </div>\n        </div>\n      </p-overlayPanel>\n    </div>\n  </div>\n  <ng-container *ngIf=\"getNumFiltersWithValues()\">\n    <div class=\"col-divider\"></div>\n    <div class=\"combo-multi-select \">\n      <div>\n        <button type=\"button\" pButton (click)=\"clearFilter()\" class=\"p-button-text button-custom-filter\">\n          <view-svg name=\"arrowReload\"></view-svg>\n          <span class=\"p-button-label\">{{'clearFilter' | translate}}</span>\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>", styles: ["::ng-deep .list-multi-select{padding:1rem}::ng-deep .list-multi-select .p-button-label{padding-left:8px}::ng-deep .list-multi-select .p-button{padding-left:4px}::ng-deep .list-multi-select .p-overlaypanel:after,::ng-deep .list-multi-select .p-overlaypanel:before{display:none}.filter-panel{display:flex;flex-direction:column;gap:1rem;padding:1rem}.filter-panel .filter-item{display:flex;flex-direction:column}.filter-panel .filter-item label{font-size:14px;margin-bottom:.5rem;color:#333}.filter-panel .filter-item ::ng-deep .p-multiselect{width:100%}.filter-panel .filter-actions{display:flex;justify-content:flex-end;gap:1rem}.filter-panel .filter-actions button{min-width:100px}.button-custom-filter{border:unset!important;box-shadow:unset!important;background:#fff!important;color:#404040!important;transition:0s}.button-custom-filter span{font-weight:400}.button-custom-filter:has(.open){transition:0s;color:#2e6be5!important}.button-custom-filter:has(.open) ::ng-deep path{stroke:#2e6be5}.col-divider{height:40px;width:1px;background-color:#e6e6e6;align-self:center}::ng-deep .combo-multi-select{padding:1rem}::ng-deep .combo-multi-select .p-button-label{padding-left:8px}::ng-deep .combo-multi-select .p-button{padding-left:4px}::ng-deep .combo-multi-select .p-overlaypanel:after,::ng-deep .combo-multi-select .p-overlaypanel:before{display:none}\n"], dependencies: [{ kind: "ngmodule", type: TranslateModule }, { kind: "pipe", type: i1.TranslatePipe, name: "translate" }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: OverlayPanelModule }, { kind: "component", type: i4.OverlayPanel, selector: "p-overlayPanel", inputs: ["dismissable", "showCloseIcon", "style", "styleClass", "appendTo", "autoZIndex", "ariaCloseLabel", "baseZIndex", "focusOnShow", "showTransitionOptions", "hideTransitionOptions"], outputs: ["onShow", "onHide"] }, { kind: "directive", type: i5.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "ngmodule", type: ButtonModule }, { kind: "directive", type: i6.ButtonDirective, selector: "[pButton]", inputs: ["iconPos", "loadingIcon", "label", "icon", "loading"] }, { kind: "ngmodule", type: MultiSelectModule }, { kind: "component", type: i7.MultiSelect, selector: "p-multiSelect", inputs: ["style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "label", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "filterBy", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "defaultLabel", "placeholder", "options", "filterValue", "itemSize"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide", "onLazyLoad", "onRemove"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ListMultiSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'list-multi-select', standalone: true, imports: [
                        TranslateModule,
                        CommonModule,
                        ReactiveFormsModule,
                        FormsModule,
                        OverlayPanelModule,
                        ButtonModule,
                        MultiSelectModule
                    ], providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => ListMultiSelectComponent),
                            multi: true,
                        }
                    ], template: "<div class=\"flex\">\n  <div class=\"list-multi-select \">\n    <div>\n      <button type=\"button\" pButton (click)=\"filterPanel.toggle($event)\" class=\"p-button-text button-custom-filter\">\n        <!-- <view-svg name=\"controlsAt\"></view-svg> -->\n\n        <span class=\"p-button-label\" [class.open]=\"filterPanel.overlayVisible\"\n          *ngIf=\"!getNumFiltersWithValues()\">{{'moreFilter' | translate}}</span>\n        <span class=\"p-button-label open\" *ngIf=\"getNumFiltersWithValues()\">{{'filtered' |\n          translate}} ({{getNumFiltersWithValues()}}/{{filters.length}})</span>\n      </button>\n      <p-overlayPanel #filterPanel (onShow)=\"openFilterPanel()\" [showCloseIcon]=\"false\" [style]=\"{width: '450px'}\">\n\n        <div class=\"filter-panel\">\n          <div class=\"filter-item\" *ngFor=\"let filter of filters\">\n            <div class=\"flex align-items-center justify-content-between\">\n              <label>{{ filter.label | translate }}</label>\n              <label *ngIf=\"tempFormValues[filter.formControlName] && filter.options\">\n                {{formatFilter(tempFormValues[filter.formControlName].length,filter.options.length)}}\n              </label>\n            </div>\n            <p-multiSelect [pTooltip]=\"getTooltipText(filter)\" appendTo=\"body\" tooltipPosition=\"bottom\"\n              [options]=\"filter.options\" ngDefaultControl [(ngModel)]=\"tempFormValues[filter.formControlName]\"\n              placeholder=\"{{ 'all' | translate }}\">\n\n              <ng-template let-selectedItems pTemplate=\"selectedItems\">\n                <span *ngIf=\"selectedItems?.length > 0\">\n                  {{ getTooltipText(filter)}}\n                </span>\n                <span *ngIf=\"!selectedItems || selectedItems.length === 0\">\n                  {{ 'all' | translate }}\n                </span>\n              </ng-template>\n              <ng-template pTemplate=\"option\" let-option>{{option.label | translate}} </ng-template>\n            </p-multiSelect>\n          </div>\n          <div class=\"filter-actions\">\n            <button pButton type=\"button\" [label]=\"'cancel'| translate\" class=\"p-button-outlined\"\n              (click)=\"filterPanel.hide()\"></button>\n            <button pButton type=\"button\" [label]=\"'apply'| translate\" class=\"p-button-primary\"\n              (click)=\"applyFilters(); filterPanel.hide()\"></button>\n          </div>\n        </div>\n      </p-overlayPanel>\n    </div>\n  </div>\n  <ng-container *ngIf=\"getNumFiltersWithValues()\">\n    <div class=\"col-divider\"></div>\n    <div class=\"combo-multi-select \">\n      <div>\n        <button type=\"button\" pButton (click)=\"clearFilter()\" class=\"p-button-text button-custom-filter\">\n          <view-svg name=\"arrowReload\"></view-svg>\n          <span class=\"p-button-label\">{{'clearFilter' | translate}}</span>\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>", styles: ["::ng-deep .list-multi-select{padding:1rem}::ng-deep .list-multi-select .p-button-label{padding-left:8px}::ng-deep .list-multi-select .p-button{padding-left:4px}::ng-deep .list-multi-select .p-overlaypanel:after,::ng-deep .list-multi-select .p-overlaypanel:before{display:none}.filter-panel{display:flex;flex-direction:column;gap:1rem;padding:1rem}.filter-panel .filter-item{display:flex;flex-direction:column}.filter-panel .filter-item label{font-size:14px;margin-bottom:.5rem;color:#333}.filter-panel .filter-item ::ng-deep .p-multiselect{width:100%}.filter-panel .filter-actions{display:flex;justify-content:flex-end;gap:1rem}.filter-panel .filter-actions button{min-width:100px}.button-custom-filter{border:unset!important;box-shadow:unset!important;background:#fff!important;color:#404040!important;transition:0s}.button-custom-filter span{font-weight:400}.button-custom-filter:has(.open){transition:0s;color:#2e6be5!important}.button-custom-filter:has(.open) ::ng-deep path{stroke:#2e6be5}.col-divider{height:40px;width:1px;background-color:#e6e6e6;align-self:center}::ng-deep .combo-multi-select{padding:1rem}::ng-deep .combo-multi-select .p-button-label{padding-left:8px}::ng-deep .combo-multi-select .p-button{padding-left:4px}::ng-deep .combo-multi-select .p-overlaypanel:after,::ng-deep .combo-multi-select .p-overlaypanel:before{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; }, propDecorators: { formGroup: [{
                type: Input
            }], filters: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1tdWx0aS1zZWxlY3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbWEtbGliL3NyYy9saWIvY29tcG9uZW50L2Zvcm0vbGlzdC1tdWx0aS1zZWxlY3QvbGlzdC1tdWx0aS1zZWxlY3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbWEtbGliL3NyYy9saWIvY29tcG9uZW50L2Zvcm0vbGlzdC1tdWx0aS1zZWxlY3QvbGlzdC1tdWx0aS1zZWxlY3QuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxHQUVOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGVBQWUsRUFBb0IsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7OztBQXdCL0MsTUFBTSxPQUFPLHdCQUF3QjtJQVFuQyxJQUFJLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxZQUNVLFNBQTJCO1FBQTNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBVDVCLFlBQU8sR0FBUSxFQUFFLENBQUM7UUFFM0IsbUJBQWMsR0FBUSxFQUFFLENBQUM7SUFTekIsQ0FBQztJQUNELFFBQVE7SUFFUixDQUFD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K0JBQ0UsbUJBQW1CLGNBRWpCLElBQUksV0FDUDt3QkFDUCxlQUFlO3dCQUNmLFlBQVk7d0JBQ1osbUJBQW1CO3dCQUNuQixXQUFXO3dCQUNYLGtCQUFrQjt3QkFDbEIsWUFBWTt3QkFDWixpQkFBaUI7cUJBQ2xCLGFBRVU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUseUJBQXlCLENBQUM7NEJBQ3ZELEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGO3VHQUtRLFNBQVM7c0JBQWpCLEtBQUs7Z0JBQ0csT0FBTztzQkFBZixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBmb3J3YXJkUmVmLFxuICBJbnB1dCxcbiAgT25Jbml0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybXNNb2R1bGUsIE5HX1ZBTFVFX0FDQ0VTU09SLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgT3ZlcmxheVBhbmVsTW9kdWxlIH0gZnJvbSAncHJpbWVuZy9vdmVybGF5cGFuZWwnO1xuaW1wb3J0IHsgQnV0dG9uTW9kdWxlIH0gZnJvbSAncHJpbWVuZy9idXR0b24nO1xuaW1wb3J0IHsgVHJhbnNsYXRlTW9kdWxlLCBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBNdWx0aVNlbGVjdE1vZHVsZSB9IGZyb20gJ3ByaW1lbmcvbXVsdGlzZWxlY3QnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGlzdC1tdWx0aS1zZWxlY3QnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGlzdC1tdWx0aS1zZWxlY3QuY29tcG9uZW50Lmh0bWwnLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbXG4gICAgVHJhbnNsYXRlTW9kdWxlLFxuICAgIENvbW1vbk1vZHVsZSxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIEZvcm1zTW9kdWxlLFxuICAgIE92ZXJsYXlQYW5lbE1vZHVsZSxcbiAgICBCdXR0b25Nb2R1bGUsXG4gICAgTXVsdGlTZWxlY3RNb2R1bGVcbiAgXSxcbiAgc3R5bGVVcmxzOiBbJ2xpc3QtbXVsdGktc2VsZWN0LmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTGlzdE11bHRpU2VsZWN0Q29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMaXN0TXVsdGlTZWxlY3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG5cbiAgQElucHV0KCkgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XG4gIEBJbnB1dCgpIGZpbHRlcnM6IGFueSA9IFtdO1xuXG4gIHRlbXBGb3JtVmFsdWVzOiBhbnkgPSB7fTtcblxuICBnZXQgZigpIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtR3JvdXA/LmNvbnRyb2xzO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICkge1xuICB9XG4gIG5nT25Jbml0KCk6IHZvaWQge1xuXG4gIH1cblxuICBvcGVuRmlsdGVyUGFuZWwoKTogdm9pZCB7XG4gICAgdGhpcy50ZW1wRm9ybVZhbHVlcyA9IHsgLi4udGhpcy5mb3JtR3JvdXAudmFsdWUgfTtcbiAgfVxuICBhcHBseUZpbHRlcnMoKTogdm9pZCB7XG4gICAgdGhpcy5maWx0ZXJzLmZvckVhY2goZmlsdGVyID0+IHtcbiAgICAgIHRoaXMuZm9ybUdyb3VwPy5nZXQoZmlsdGVyLmZvcm1Db250cm9sTmFtZSk/LnNldFZhbHVlKHRoaXMudGVtcEZvcm1WYWx1ZXNbZmlsdGVyLmZvcm1Db250cm9sTmFtZV0pO1xuICAgIH0pO1xuICB9XG4gIGdldFRvb2x0aXBUZXh0KGZpbHRlcjogYW55KTogc3RyaW5nIHtcbiAgICBjb25zdCBjb250cm9sID0gdGhpcy50ZW1wRm9ybVZhbHVlc1tgJHtmaWx0ZXIuZm9ybUNvbnRyb2xOYW1lfWBdO1xuICAgIGlmIChjb250cm9sKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZE9wdGlvbnMgPSBmaWx0ZXIub3B0aW9ucy5maWx0ZXIob3B0aW9uID0+IGNvbnRyb2wuaW5jbHVkZXMob3B0aW9uLnZhbHVlKSk7XG4gICAgICByZXR1cm4gc2VsZWN0ZWRPcHRpb25zLmxlbmd0aCA+IDBcbiAgICAgICAgPyBzZWxlY3RlZE9wdGlvbnMubWFwKG9wdGlvbiA9PiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KG9wdGlvbi5sYWJlbCkpLmpvaW4oJywgJylcbiAgICAgICAgOiAnJztcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGdldE51bUZpbHRlcnNXaXRoVmFsdWVzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVycy5yZWR1Y2UoKGNvdW50LCBmaWx0ZXIpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5mW2ZpbHRlci5mb3JtQ29udHJvbE5hbWVdPy52YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPyBjb3VudCArIDEgOiBjb3VudDtcbiAgICB9LCAwKTtcbiAgfVxuICBjbGVhckZpbHRlcigpIHtcbiAgICB0aGlzLmZpbHRlcnMuZm9yRWFjaChmaWx0ZXIgPT4ge1xuICAgICAgdGhpcy5mb3JtR3JvdXA/LmdldChmaWx0ZXIuZm9ybUNvbnRyb2xOYW1lKT8uc2V0VmFsdWUobnVsbCk7XG4gICAgfSk7XG4gIH1cblxuICBmb3JtYXRGaWx0ZXIoczEsIHMyKSB7XG4gICAgaWYgKCFzMSkgcmV0dXJuICcnO1xuICAgIHJldHVybiBzMS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJykgKyAnLycgKyBzMi50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJykgKyAnICcgKyB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdzZWxlY3RlZCcpO1xuICB9XG59ICIsIjxkaXYgY2xhc3M9XCJmbGV4XCI+XG4gIDxkaXYgY2xhc3M9XCJsaXN0LW11bHRpLXNlbGVjdCBcIj5cbiAgICA8ZGl2PlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgcEJ1dHRvbiAoY2xpY2spPVwiZmlsdGVyUGFuZWwudG9nZ2xlKCRldmVudClcIiBjbGFzcz1cInAtYnV0dG9uLXRleHQgYnV0dG9uLWN1c3RvbS1maWx0ZXJcIj5cbiAgICAgICAgPCEtLSA8dmlldy1zdmcgbmFtZT1cImNvbnRyb2xzQXRcIj48L3ZpZXctc3ZnPiAtLT5cblxuICAgICAgICA8c3BhbiBjbGFzcz1cInAtYnV0dG9uLWxhYmVsXCIgW2NsYXNzLm9wZW5dPVwiZmlsdGVyUGFuZWwub3ZlcmxheVZpc2libGVcIlxuICAgICAgICAgICpuZ0lmPVwiIWdldE51bUZpbHRlcnNXaXRoVmFsdWVzKClcIj57eydtb3JlRmlsdGVyJyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInAtYnV0dG9uLWxhYmVsIG9wZW5cIiAqbmdJZj1cImdldE51bUZpbHRlcnNXaXRoVmFsdWVzKClcIj57eydmaWx0ZXJlZCcgfFxuICAgICAgICAgIHRyYW5zbGF0ZX19ICh7e2dldE51bUZpbHRlcnNXaXRoVmFsdWVzKCl9fS97e2ZpbHRlcnMubGVuZ3RofX0pPC9zcGFuPlxuICAgICAgPC9idXR0b24+XG4gICAgICA8cC1vdmVybGF5UGFuZWwgI2ZpbHRlclBhbmVsIChvblNob3cpPVwib3BlbkZpbHRlclBhbmVsKClcIiBbc2hvd0Nsb3NlSWNvbl09XCJmYWxzZVwiIFtzdHlsZV09XCJ7d2lkdGg6ICc0NTBweCd9XCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZpbHRlci1wYW5lbFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmaWx0ZXItaXRlbVwiICpuZ0Zvcj1cImxldCBmaWx0ZXIgb2YgZmlsdGVyc1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXCI+XG4gICAgICAgICAgICAgIDxsYWJlbD57eyBmaWx0ZXIubGFiZWwgfCB0cmFuc2xhdGUgfX08L2xhYmVsPlxuICAgICAgICAgICAgICA8bGFiZWwgKm5nSWY9XCJ0ZW1wRm9ybVZhbHVlc1tmaWx0ZXIuZm9ybUNvbnRyb2xOYW1lXSAmJiBmaWx0ZXIub3B0aW9uc1wiPlxuICAgICAgICAgICAgICAgIHt7Zm9ybWF0RmlsdGVyKHRlbXBGb3JtVmFsdWVzW2ZpbHRlci5mb3JtQ29udHJvbE5hbWVdLmxlbmd0aCxmaWx0ZXIub3B0aW9ucy5sZW5ndGgpfX1cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHAtbXVsdGlTZWxlY3QgW3BUb29sdGlwXT1cImdldFRvb2x0aXBUZXh0KGZpbHRlcilcIiBhcHBlbmRUbz1cImJvZHlcIiB0b29sdGlwUG9zaXRpb249XCJib3R0b21cIlxuICAgICAgICAgICAgICBbb3B0aW9uc109XCJmaWx0ZXIub3B0aW9uc1wiIG5nRGVmYXVsdENvbnRyb2wgWyhuZ01vZGVsKV09XCJ0ZW1wRm9ybVZhbHVlc1tmaWx0ZXIuZm9ybUNvbnRyb2xOYW1lXVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwie3sgJ2FsbCcgfCB0cmFuc2xhdGUgfX1cIj5cblxuICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgbGV0LXNlbGVjdGVkSXRlbXMgcFRlbXBsYXRlPVwic2VsZWN0ZWRJdGVtc1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuICpuZ0lmPVwic2VsZWN0ZWRJdGVtcz8ubGVuZ3RoID4gMFwiPlxuICAgICAgICAgICAgICAgICAge3sgZ2V0VG9vbHRpcFRleHQoZmlsdGVyKX19XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuICpuZ0lmPVwiIXNlbGVjdGVkSXRlbXMgfHwgc2VsZWN0ZWRJdGVtcy5sZW5ndGggPT09IDBcIj5cbiAgICAgICAgICAgICAgICAgIHt7ICdhbGwnIHwgdHJhbnNsYXRlIH19XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgcFRlbXBsYXRlPVwib3B0aW9uXCIgbGV0LW9wdGlvbj57e29wdGlvbi5sYWJlbCB8IHRyYW5zbGF0ZX19IDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICA8L3AtbXVsdGlTZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZpbHRlci1hY3Rpb25zXCI+XG4gICAgICAgICAgICA8YnV0dG9uIHBCdXR0b24gdHlwZT1cImJ1dHRvblwiIFtsYWJlbF09XCInY2FuY2VsJ3wgdHJhbnNsYXRlXCIgY2xhc3M9XCJwLWJ1dHRvbi1vdXRsaW5lZFwiXG4gICAgICAgICAgICAgIChjbGljayk9XCJmaWx0ZXJQYW5lbC5oaWRlKClcIj48L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gcEJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgW2xhYmVsXT1cIidhcHBseSd8IHRyYW5zbGF0ZVwiIGNsYXNzPVwicC1idXR0b24tcHJpbWFyeVwiXG4gICAgICAgICAgICAgIChjbGljayk9XCJhcHBseUZpbHRlcnMoKTsgZmlsdGVyUGFuZWwuaGlkZSgpXCI+PC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9wLW92ZXJsYXlQYW5lbD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCJnZXROdW1GaWx0ZXJzV2l0aFZhbHVlcygpXCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1kaXZpZGVyXCI+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNvbWJvLW11bHRpLXNlbGVjdCBcIj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIHBCdXR0b24gKGNsaWNrKT1cImNsZWFyRmlsdGVyKClcIiBjbGFzcz1cInAtYnV0dG9uLXRleHQgYnV0dG9uLWN1c3RvbS1maWx0ZXJcIj5cbiAgICAgICAgICA8dmlldy1zdmcgbmFtZT1cImFycm93UmVsb2FkXCI+PC92aWV3LXN2Zz5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInAtYnV0dG9uLWxhYmVsXCI+e3snY2xlYXJGaWx0ZXInIHwgdHJhbnNsYXRlfX08L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvbmctY29udGFpbmVyPlxuPC9kaXY+Il19