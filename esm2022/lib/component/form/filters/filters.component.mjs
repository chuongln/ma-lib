import { Component, forwardRef, Input, } from '@angular/core';
import { FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';
import { OverlayPanelModule } from 'primeng/overlaypanel';
import { ButtonModule } from 'primeng/button';
import { MultiSelectModule } from 'primeng/multiselect';
import { InputTextModule } from 'primeng/inputtext';
import { MaLibModule } from '../../../ma-lib.module';
import { DropdownModule } from 'primeng/dropdown';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@angular/common";
import * as i3 from "../../view-svg/view-svg.component";
import * as i4 from "@angular/forms";
import * as i5 from "primeng/overlaypanel";
import * as i6 from "primeng/api";
import * as i7 from "primeng/button";
import * as i8 from "primeng/inputtext";
import * as i9 from "primeng/dropdown";
import * as i10 from "primeng/multiselect";
export class FiltersComponent {
    get f() {
        return this.formGroup?.controls;
    }
    constructor(translate) {
        this.translate = translate;
        this.filters = [];
        this.tempFormValues = {};
    }
    ngOnInit() {
    }
    openFilterPanel() {
        this.tempFormValues = { ...this.formGroup.value };
    }
    applyFilters() {
        this.filters.forEach(filter => {
            this.formGroup?.get(filter.formControlName)?.setValue(this.tempFormValues[filter.formControlName]);
        });
    }
    getTooltipText(filter) {
        const control = this.tempFormValues[`${filter.formControlName}`];
        if (control) {
            const selectedOptions = filter.options.filter(option => control.includes(option[filter.optionValue || 'value']));
            return selectedOptions.length > 0
                ? selectedOptions.map(option => this.translate.instant(option[filter.optionLabel || 'label'])).join(', ')
                : '';
        }
        return '';
    }
    getNumFiltersWithValues() {
        return this.filters.reduce((count, filter) => {
            const value = this.f[filter.formControlName]?.value;
            return value && value.length ? count + 1 : count;
        }, 0);
    }
    clearFilter() {
        this.filters.forEach(filter => {
            this.formGroup?.get(filter.formControlName)?.setValue(null);
        });
    }
    formatFilter(s1, s2) {
        if (!s1)
            return '';
        return s1.toString().padStart(2, '0') + '/' + s2.toString().padStart(2, '0') + ' ' + this.translate.instant('selected');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: FiltersComponent, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: FiltersComponent, isStandalone: true, selector: "filters", inputs: { formGroup: "formGroup", filters: "filters" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => FiltersComponent),
                multi: true,
            }
        ], ngImport: i0, template: "<div class=\"flex\">\n  <div class=\"list-multi-select \">\n    <div>\n      <button type=\"button\" pButton (click)=\"filterPanel.toggle($event)\" class=\"p-button-text button-custom-filter\">\n        <view-svg name=\"controlsAt\"></view-svg>\n\n        <span class=\"p-button-label\" [class.open]=\"filterPanel.overlayVisible\"\n          *ngIf=\"!getNumFiltersWithValues()\">{{'moreFilter' | translate}}</span>\n        <span class=\"p-button-label open\" *ngIf=\"getNumFiltersWithValues()\">{{'filtered' |\n          translate}} ({{getNumFiltersWithValues()}}/{{filters.length}})</span>\n      </button>\n      <p-overlayPanel #filterPanel (onShow)=\"openFilterPanel()\" [showCloseIcon]=\"false\" [style]=\"{width: '450px'}\">\n\n        <div class=\"filter-panel\">\n          <div class=\"filter-item\" *ngFor=\"let filter of filters\">\n            <div class=\"flex align-items-center justify-content-between\">\n              <label>{{ filter.label | translate }}</label>\n              <label *ngIf=\"filter.type =='multi-select' && tempFormValues[filter.formControlName] && filter.options\">\n                {{formatFilter(tempFormValues[filter.formControlName].length,filter.options.length)}}\n              </label>\n            </div>\n            <ng-container *ngIf=\"filter.type == 'multi-select'\">\n              <p-multiSelect [pTooltip]=\"getTooltipText(filter)\" appendTo=\"body\" tooltipPosition=\"bottom\"\n                [optionValue]=\"filter.optionValue || 'value'\" [options]=\"filter.options\" ngDefaultControl\n                [placeholder]=\"(filter.placeholder ||'all') | translate\"\n                [(ngModel)]=\"tempFormValues[filter.formControlName]\">\n\n                <ng-template let-selectedItems pTemplate=\"selectedItems\">\n                  <span *ngIf=\"selectedItems?.length > 0\">\n                    {{ getTooltipText(filter)}}\n                  </span>\n                  <span *ngIf=\"!selectedItems || selectedItems.length === 0\">\n                    {{ (filter.placeholder ||'all') | translate }}\n                  </span>\n                </ng-template>\n                <ng-template pTemplate=\"option\" let-option>{{ (option[filter.optionLabel || 'label' ]) | translate}}\n                </ng-template>\n              </p-multiSelect>\n            </ng-container>\n\n            <ng-container *ngIf=\"filter.type == 'select'\">\n              <p-dropdown [(ngModel)]=\"tempFormValues[filter.formControlName]\" [options]=\"filter.options\"\n                [optionValue]=\"filter.optionValue || 'value'\" (onShow)=\"handleDropdownOpen()\"\n                [placeholder]=\"(filter.placeholder ||'') | translate\" (onHide)=\"handleDropdownClose()\">\n                <ng-template let-selectedItem pTemplate=\"selectedItem\">\n                  <span *ngIf=\"selectedItem\">\n                    {{ selectedItem[filter.optionLabel || 'label' ] | translate}}\n                  </span>\n                  <span *ngIf=\"!selectedItem \">\n                    {{ (filter.placeholder || '') | translate }}\n                  </span>\n                </ng-template>\n                <ng-template pTemplate=\"option\" let-option>{{option[filter.optionLabel || 'label' ] | translate}}\n                </ng-template>\n              </p-dropdown>\n            </ng-container>\n            <ng-container *ngIf=\"filter.type == 'text'\">\n              <input type=\"text\" pInputText [placeholder]=\"(filter.placeholder || '')| translate\"\n                [(ngModel)]=\"tempFormValues[filter.formControlName]\" />\n            </ng-container>\n          </div>\n          <div class=\"filter-actions\">\n            <button pButton type=\"button\" [label]=\"'cancel'| translate\" class=\"p-button-outlined\"\n              (click)=\"filterPanel.hide()\"></button>\n            <button pButton type=\"button\" [label]=\"'apply'| translate\" class=\"p-button-primary\"\n              (click)=\"applyFilters(); filterPanel.hide()\"></button>\n          </div>\n        </div>\n      </p-overlayPanel>\n    </div>\n  </div>\n  <ng-container *ngIf=\"getNumFiltersWithValues()\">\n    <div class=\"col-divider\"></div>\n    <div class=\"combo-multi-select \">\n      <div>\n        <button type=\"button\" pButton (click)=\"clearFilter()\" class=\"p-button-text button-custom-filter\">\n          <view-svg name=\"arrowReload\"></view-svg>\n          <span class=\"p-button-label\">{{'clearFilter' | translate}}</span>\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>", styles: ["::ng-deep .list-multi-select{padding:1rem}::ng-deep .list-multi-select .p-button-label{padding-left:8px}::ng-deep .list-multi-select .p-button{padding-left:4px}::ng-deep .list-multi-select .p-overlaypanel:after,::ng-deep .list-multi-select .p-overlaypanel:before{display:none}.filter-panel{display:flex;flex-direction:column;gap:1rem;padding:1rem;max-height:65vh;overflow:auto}.filter-panel *{font-size:12px!important}.filter-panel .filter-item{display:flex;flex-direction:column}.filter-panel .filter-item label{font-size:14px;margin-bottom:.5rem;color:#333}.filter-panel .filter-item ::ng-deep .p-multiselect{width:100%}.filter-panel .filter-actions{display:flex;justify-content:flex-end;gap:1rem}.filter-panel .filter-actions button{min-width:100px}.button-custom-filter{border:unset!important;box-shadow:unset!important;background:#fff!important;color:#404040!important;transition:0s}.button-custom-filter span{font-weight:400}.button-custom-filter:has(.open){transition:0s;color:#2e6be5!important}.button-custom-filter:has(.open) ::ng-deep path{stroke:#2e6be5}.col-divider{height:40px;width:1px;background-color:#e6e6e6;align-self:center}::ng-deep .combo-multi-select{padding:1rem}::ng-deep .combo-multi-select .p-button-label{padding-left:8px}::ng-deep .combo-multi-select .p-button{padding-left:4px}::ng-deep .combo-multi-select .p-overlaypanel:after,::ng-deep .combo-multi-select .p-overlaypanel:before{display:none}::ng-deep .filter-item .p-dropdown{width:100%}\n"], dependencies: [{ kind: "ngmodule", type: MaLibModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.ViewSvgComponent, selector: "view-svg", inputs: ["name"] }, { kind: "pipe", type: i1.TranslatePipe, name: "translate" }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: OverlayPanelModule }, { kind: "component", type: i5.OverlayPanel, selector: "p-overlayPanel", inputs: ["dismissable", "showCloseIcon", "style", "styleClass", "appendTo", "autoZIndex", "ariaCloseLabel", "baseZIndex", "focusOnShow", "showTransitionOptions", "hideTransitionOptions"], outputs: ["onShow", "onHide"] }, { kind: "directive", type: i6.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "ngmodule", type: ButtonModule }, { kind: "directive", type: i7.ButtonDirective, selector: "[pButton]", inputs: ["iconPos", "loadingIcon", "label", "icon", "loading"] }, { kind: "ngmodule", type: InputTextModule }, { kind: "directive", type: i8.InputText, selector: "[pInputText]" }, { kind: "ngmodule", type: DropdownModule }, { kind: "component", type: i9.Dropdown, selector: "p-dropdown", inputs: ["scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "selectId", "dataKey", "filterBy", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "overlayDirection", "disabled", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "filterValue", "options"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear", "onLazyLoad"] }, { kind: "ngmodule", type: MultiSelectModule }, { kind: "component", type: i10.MultiSelect, selector: "p-multiSelect", inputs: ["style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "label", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "filterBy", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "defaultLabel", "placeholder", "options", "filterValue", "itemSize"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide", "onLazyLoad", "onRemove"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: FiltersComponent, decorators: [{
            type: Component,
            args: [{ selector: 'filters', standalone: true, imports: [
                        MaLibModule,
                        ReactiveFormsModule,
                        FormsModule,
                        OverlayPanelModule,
                        ButtonModule,
                        InputTextModule,
                        DropdownModule,
                        MultiSelectModule
                    ], providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => FiltersComponent),
                            multi: true,
                        }
                    ], template: "<div class=\"flex\">\n  <div class=\"list-multi-select \">\n    <div>\n      <button type=\"button\" pButton (click)=\"filterPanel.toggle($event)\" class=\"p-button-text button-custom-filter\">\n        <view-svg name=\"controlsAt\"></view-svg>\n\n        <span class=\"p-button-label\" [class.open]=\"filterPanel.overlayVisible\"\n          *ngIf=\"!getNumFiltersWithValues()\">{{'moreFilter' | translate}}</span>\n        <span class=\"p-button-label open\" *ngIf=\"getNumFiltersWithValues()\">{{'filtered' |\n          translate}} ({{getNumFiltersWithValues()}}/{{filters.length}})</span>\n      </button>\n      <p-overlayPanel #filterPanel (onShow)=\"openFilterPanel()\" [showCloseIcon]=\"false\" [style]=\"{width: '450px'}\">\n\n        <div class=\"filter-panel\">\n          <div class=\"filter-item\" *ngFor=\"let filter of filters\">\n            <div class=\"flex align-items-center justify-content-between\">\n              <label>{{ filter.label | translate }}</label>\n              <label *ngIf=\"filter.type =='multi-select' && tempFormValues[filter.formControlName] && filter.options\">\n                {{formatFilter(tempFormValues[filter.formControlName].length,filter.options.length)}}\n              </label>\n            </div>\n            <ng-container *ngIf=\"filter.type == 'multi-select'\">\n              <p-multiSelect [pTooltip]=\"getTooltipText(filter)\" appendTo=\"body\" tooltipPosition=\"bottom\"\n                [optionValue]=\"filter.optionValue || 'value'\" [options]=\"filter.options\" ngDefaultControl\n                [placeholder]=\"(filter.placeholder ||'all') | translate\"\n                [(ngModel)]=\"tempFormValues[filter.formControlName]\">\n\n                <ng-template let-selectedItems pTemplate=\"selectedItems\">\n                  <span *ngIf=\"selectedItems?.length > 0\">\n                    {{ getTooltipText(filter)}}\n                  </span>\n                  <span *ngIf=\"!selectedItems || selectedItems.length === 0\">\n                    {{ (filter.placeholder ||'all') | translate }}\n                  </span>\n                </ng-template>\n                <ng-template pTemplate=\"option\" let-option>{{ (option[filter.optionLabel || 'label' ]) | translate}}\n                </ng-template>\n              </p-multiSelect>\n            </ng-container>\n\n            <ng-container *ngIf=\"filter.type == 'select'\">\n              <p-dropdown [(ngModel)]=\"tempFormValues[filter.formControlName]\" [options]=\"filter.options\"\n                [optionValue]=\"filter.optionValue || 'value'\" (onShow)=\"handleDropdownOpen()\"\n                [placeholder]=\"(filter.placeholder ||'') | translate\" (onHide)=\"handleDropdownClose()\">\n                <ng-template let-selectedItem pTemplate=\"selectedItem\">\n                  <span *ngIf=\"selectedItem\">\n                    {{ selectedItem[filter.optionLabel || 'label' ] | translate}}\n                  </span>\n                  <span *ngIf=\"!selectedItem \">\n                    {{ (filter.placeholder || '') | translate }}\n                  </span>\n                </ng-template>\n                <ng-template pTemplate=\"option\" let-option>{{option[filter.optionLabel || 'label' ] | translate}}\n                </ng-template>\n              </p-dropdown>\n            </ng-container>\n            <ng-container *ngIf=\"filter.type == 'text'\">\n              <input type=\"text\" pInputText [placeholder]=\"(filter.placeholder || '')| translate\"\n                [(ngModel)]=\"tempFormValues[filter.formControlName]\" />\n            </ng-container>\n          </div>\n          <div class=\"filter-actions\">\n            <button pButton type=\"button\" [label]=\"'cancel'| translate\" class=\"p-button-outlined\"\n              (click)=\"filterPanel.hide()\"></button>\n            <button pButton type=\"button\" [label]=\"'apply'| translate\" class=\"p-button-primary\"\n              (click)=\"applyFilters(); filterPanel.hide()\"></button>\n          </div>\n        </div>\n      </p-overlayPanel>\n    </div>\n  </div>\n  <ng-container *ngIf=\"getNumFiltersWithValues()\">\n    <div class=\"col-divider\"></div>\n    <div class=\"combo-multi-select \">\n      <div>\n        <button type=\"button\" pButton (click)=\"clearFilter()\" class=\"p-button-text button-custom-filter\">\n          <view-svg name=\"arrowReload\"></view-svg>\n          <span class=\"p-button-label\">{{'clearFilter' | translate}}</span>\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>", styles: ["::ng-deep .list-multi-select{padding:1rem}::ng-deep .list-multi-select .p-button-label{padding-left:8px}::ng-deep .list-multi-select .p-button{padding-left:4px}::ng-deep .list-multi-select .p-overlaypanel:after,::ng-deep .list-multi-select .p-overlaypanel:before{display:none}.filter-panel{display:flex;flex-direction:column;gap:1rem;padding:1rem;max-height:65vh;overflow:auto}.filter-panel *{font-size:12px!important}.filter-panel .filter-item{display:flex;flex-direction:column}.filter-panel .filter-item label{font-size:14px;margin-bottom:.5rem;color:#333}.filter-panel .filter-item ::ng-deep .p-multiselect{width:100%}.filter-panel .filter-actions{display:flex;justify-content:flex-end;gap:1rem}.filter-panel .filter-actions button{min-width:100px}.button-custom-filter{border:unset!important;box-shadow:unset!important;background:#fff!important;color:#404040!important;transition:0s}.button-custom-filter span{font-weight:400}.button-custom-filter:has(.open){transition:0s;color:#2e6be5!important}.button-custom-filter:has(.open) ::ng-deep path{stroke:#2e6be5}.col-divider{height:40px;width:1px;background-color:#e6e6e6;align-self:center}::ng-deep .combo-multi-select{padding:1rem}::ng-deep .combo-multi-select .p-button-label{padding-left:8px}::ng-deep .combo-multi-select .p-button{padding-left:4px}::ng-deep .combo-multi-select .p-overlaypanel:after,::ng-deep .combo-multi-select .p-overlaypanel:before{display:none}::ng-deep .filter-item .p-dropdown{width:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; }, propDecorators: { formGroup: [{
                type: Input
            }], filters: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,